There is a multiplicity of OSS licensing methods, falling into the two general classifications:
- Permissive (such as BSD and Apache Foundation licenses)
  Do not require modifications and enhancements to be generally available.
  Prominent examples include the BSD (Berkeley Software Distribution) and Apache licenses.
- Restrictive (such as GPL-licensed software)
  Demand the software remains open and place strong limitations on any attempt to make proprietary closed products.
  Changes to the code must be made available to future recipients.
  A prominent example is the GPL (General Public License), a copyleft license.

---

Idea:

Make slides to explain and compare the different software licenses
and a decisions matrix to compare them

! Choose the right license (licence differentiator tool):
http://oss-watch.ac.uk/apps/licdiff/
https://opensource.org/licenses/category
https://choosealicense.com/
https://tldrlegal.com/licenses/browse
https://www.gnu.org/licenses/license-list.en.html

---
      
Helpful links giving input:

Many different licenses
https://www.gnu.org/licenses/license-list.en.html

How to choose a license for your own work:
https://www.gnu.org/licenses/license-recommendations.html

GPL FAQ:
https://www.gnu.org/licenses/gpl-faq.en.html

CC0 ist best option for "public domain"
https://www.gnu.org/licenses/license-list.en.html#CC0

Public Domain license (but FSF recommends CC0 instead)
http://unlicense.org/

AGPLv3
http://www.gnu.org/licenses/agpl-3.0.html

GPL General Public License:
https://en.wikipedia.org/wiki/GNU_General_Public_License#Version_3


Contributing to Open Source on GitHub
https://guides.github.com/activities/contributing-to-open-source/
->  agree with the Contributor Licence Agreement (CLA)
https://en.wikipedia.org/wiki/Contributor_License_Agreement


Summary of GPL-3 license
https://tldrlegal.com/license/gnu-general-public-license-v3-(gpl-3)

Copyleft and the GNU GPL: A comprehensive Tutorial and Guide:
https://copyleft.org/guide

http://gpl-violations.org/
-> Legal FAQ
-> Source code FAQ
-> Vendor FAQ tries to give answers to questions asked by vendors/distributors of products including GPL-licensed software.


Does the GPL require that source code of modified versions be posted to the public?
https://www.gnu.org/licenses/gpl-faq.en.html#GPLRequireSourcePostedPublic


------------

Not all create commons licenses are free licenses.

Really free creative commons licenses are e. g. CC BY or CC BY SA which are used by wikipedia too.

The NC and ND attributes restricht the contents more than make them free.

Die NC- und ND-Attribute machen Inhalte/Werke unfrei!

https://creativecommons.org/licenses/by-sa/4.0/deed.en

------------

The organization has also shown a preference for “permissive” licenses,
such as Apache, over “copyleft” licenses like the GPL, under which both GNU and Linux
— the two major components of a Linux desktop distro — are licensed.
This is understandable, as most corporate users and developers of open source prefer licenses
hat keep the door open for them to employ the code into proprietary projects.

-------------

Torvalds at LinuxCon Part III: Permissive Licenses and Org Charts
-> BSD use case

http://fossforce.com/2016/09/torvalds-linuxcon-permissive-licenses-org-charts/

“I think that if you actually want to create something bigger,
and if you want to create a community around it, the BSD license is not necessarily a great license.

“I mean, it’s worked fairly well, but you are going to have trouble finding outside developers
who feel protected by a big company that says, ‘Hey, here’s this BSD license thing and we’re not making
any promises because the copyright allows us to do anything, and allows you to do anything too.’
But as an outside developer, I would not get the warm and fuzzies by that, because I’m like,
‘Oh, this big company is going to take advantage of me,’ while the GPL says,
‘Yes, the company may be big, but nobody’s ever going to take advantage of your code.
It will remain free and nobody can take that away from you.’ I think that’s a big deal for community management.

“It wasn’t something I was planning personally when I started, but over the years
I’ve become convinced that the BSD license is great for code you don’t care about.

I’ll use it myself. If there’s a library routine that I just want to say ‘hey,
this is useful to anybody and I’m not going to maintain this,’ I’ll put it under the BSD license.”

---------------

Lizenz-Klarstellung gegen "Copyright-Trolle"

https://www.heise.de/ct/artikel/Die-Neuerungen-von-Linux-4-14-3831941.html

In den Linux-Quellen findet sich jetzt ein "Linux Kernel Enforcement Statement" genanntes Dokument. Mit ihm versucht eine Reihe von Linux-Entwicklern klarzustellen, wie sich ein Verstoß gegen die Lizenz des Linux-Kernels auf das Vertriebsrecht auswirkt. Was zunächst vielleicht nach langweiligem Juristen-Zeug klingt, hat größere Bedeutung – insbesondere für Firmen, Institutionen oder Personen in Deutschland, die GPL-lizensierte Software vertreiben. In die letzte Gruppe gehört auch der Linux-Kernel, der unter Version 2 der verbreiteten Open-Source-Lizenz steht.
...
Laut Informationen, die öffentlich oder hinter vorgehaltener Hand kursieren, bereichern sich Copyright-Trolle unter anderem mit Vertragsstrafen. Sie weisen beispielsweise Firmen oder Institutionen auf eine Lizenz-Verletzung hin, um parallel zur Beseitigung des Problems zum Unterzeichnen einer Unterlassungserklärung zu drängen. Später unterstellt der Troll dann eine weitere Copyright-Verletzung und macht die in der Unterlassungserklärung vereinbarte Vertragsstrafe geltend.
Aus der GPLv3 übernommene Abschnitte.
Aus der GPLv3 übernommene Abschnitte.

Gegen derlei Vorgehen sollen zwei im Enforcement Statement des Linux-Kernels enthaltene Passagen helfen, die aus der GPLv3 übernommen wurden. Diese stellen klar, dass Unternehmen den Linux-Kernel nach Beseitigung der Lizenzverpflichtung erneut vertreiben dürfen. Außerdem geben sie den Unternehmen ein Zeitfenster von 30 Tagen, um die Verletzung aus der Welt zu schaffen. Laut einer gängigen Interpretation erlischt das Vertriebsrecht von GPLv2-lizenzierter Software bei einem Lizenzverstoß sofort; Copyright-Trolle nutzen das offenbar als Hebel, um Unternehmen unter Druck zu setzen.

Die beiden Passagen sind allerdings keine Ergänzung der Lizenz des Kernels. Sie sind vielmehr eine Absichtserklärung jener Linux-Programmierer, die das Dokument für sich oder für ihr Unternehmen unterzeichnet haben. Beim Entstehen dieser Textzeilen hatten 105 Entwickler das Dokument signiert, darunter viele bekannten Größen wie Linus Torvalds, Greg Kroah-Hartman, David S. Miller oder Ingo Molnar. Die Autoren des Dokuments hoffen anscheinend, dass sich die Erklärung auf Gerichtsverfahren auswirkt. Eine offizielle Lizenz-Ergänzung wäre dabei natürlich ein besserer Hebel. Eine solche wäre aber schon allein durch die vielen Copyright-Halter wohl nur schwer umsetzbar, selbst wenn McHardy nicht einer von ihnen wäre. 

--------------

static vs dynamic libraries:
https://stackoverflow.com/questions/12237282/whats-the-difference-between-so-la-and-a-library-files

licensing - LGPL requires dynamic linking in a commercial context, i.e. where you don't want to distribute your source

# AGPL v3.0 - GNU Affero General Public License

Die GNU Affero General Public License, kurz AGPL, ist eine von der Free Software Foundation, kurz FSF, unterstützte und veröffentlichte Copyleft-Lizenz, die derzeit in Version 3 vorliegt. Ihren Namen verdankt sie der Firma Affero, die die beiden Vorgängerversionen der AGPL entwickelt hat.

Die AGPLv3 ist mit der GPLv3 kompatibel und wird von der FSF sogar gegenüber der GPLv3 empfohlen. Sie schließt das sogenannte GPL-Schlupfloch, indem sie die GPLv3 um einen Regelungsabschnitt ergänzt. Das Schlupfloch entsteht, wenn GPL-lizenzierter Code abgeändert und nur im Rahmen von Hosting oder ASP-Anwendungen eingesetzt wird, wodurch kein Anspruch auf Überlassung (Copyleft) des modifizierten Codes besteht.

> Die AGPL geht noch einen Schritt weiter [als die GPL] und verpflichtet dazu,
> den Quellcode selbst dann zur Verfügung zu stellen, wenn er auf einem mit dem Netzwerk verbundenen Server
> als Software-as-a-Service (SaaS) oder als Application Service Provider (ASP) verwendet wird.


-------------

https://www.heise.de/forum/heise-online/News-Kommentare/Wegen-GPLv3-FreeBSD-wirft-GCC-raus/forum-445344/comment/

https://resources.whitesourcesoftware.com/blog-whitesource/top-open-source-licenses-trends-and-predictions

https://resources.whitesourcesoftware.com/blog-whitesource/top-10-open-source-software-licenses-of-2016-and-key-trends

------------

GPL-3 critics

http://gplv3.fsf.org/rms-why.html

https://www.linux-magazin.de/news/linspire-gplv3-wird-linux-schaden/

https://www.heise.de/newsticker/meldung/Torvalds-bezieht-Stellung-zur-GPLv3-109394.html

-------------

FreeBSD eingesetzt von Juniper, NetAPP, Sony (Playstation 3 und 4) und macht erhebliche Teile von macOS aus.

--------------

das "schöne" bei den BSD-Lizenzen ist ja, dass man auch Geld mit verdienen kann, und dass man diese Lizenzen auch nicht auf die Produkte, die man damit verwendet, ausdehnen muss.
Eine BSD-Lizenz ist also die Methode, mit der geistigen Arbeit anderer Geld zu verdienen.
Bei GPL-Lizenzen muss man immer damit rechnen, dass irgendjemand einen vor Gericht zieht, bei BSD nie.

------------

The Apache Software License is more permissive than the GPL

-----------

Licenses that Convey Patent Rights:

Does a license convey [= übertragen?; "grant"] explicit patent rights from contributors to users?

Yes:
Apache 2.0
GPL 3.0 and LGPL 3.0	
MPL 1.0, 1.1, 2.0	
EPL 1.0	
CDDL 1.0	

No:
BSD 2-Clause, 3-Clause		
MIT		
GPL 2.0 and LGPL 2.1

----------------

System to measure and document open source license compliance
https://www.fossology.org/
https://www.linuxfoundation.org/press-release/2018/12/the-linux-foundation-to-launch-new-tooling-project-to-improve-open-source-compliance/
-> scans all files (goal: automated compliance checks)

ACT = Automated Compliance Tooling 
The word "automated" in the ACT name is important. Having a smooth workflow with compliance evaluation built into the work flow end-to-end can only lead to speedier and more confident development and deployment, and integration with CI/CD methods. ACT welcomes additional tooling projects and offers a stable, neutral foundation for them with the support of the Linux Foundation.

Running FOSSology in a container locally:

1.  If you are on a
Linux
distribution, and you do not already have
docker
installed, this is probably as simple as:
$ sudo yum install docker
$ sudo zypper install docker
$ sudo apt install docker.io
picking the right command for your system.
2.  You will need to start
docker
if it is not already running with:
$ sudo systemctl start docker
3.  Navigate to
https://hub.docker.com/r/fossology/fossology/
and read the instructions and requirements there.
4.  Run the command:
$ sudo docker pull fossology/fossology
to download the image.

5.  Start running the container with:
$ sudo docker run -p 8081:80 fossology/fossology
To run things locally with the browser interface you will need a web server running. On most
Linux
systems this will be
Apache (httpd). If this is not already installed:

6.
$ sudo yum install httpd
$ sudo apt install apache2
$ sudo zypper install httpd
picking the right command for your system.
Start the web server with the appropriate command:
$ sudo systemctl start httpd
$ sudo systemctl start apache2

7.  Now  point  your  browser  to http://localhost:8081/repo.
    If you  have  succeeded  so  far,  you  will  see  the  same interface you saw on the online testing platform.

8.  When you are done you will probably want to issue a docker stop ... command to kill your session.

Please Note
Depending on how your system is configured, you may not need to use
sudo
on the
docker
commands
--------------

Software Package Data Exchange (SPDX)
https://spdx.org/

The Software Package Data Exchange (SPDX) open standard provides a common format for sharing data about software copyrights, licenses, security information, etc.

A project will include an SPDX file that consists of a series of tags and values, separated by a colon and space (there are other possible formats but this is the simplest one).

Here is an example lifted from David Wheeler's excellent SPDX Tutorial:
https://github.com/david-a-wheeler/spdx-tutorial

SPDXVersion: SPDX-2.1
DataLicense: CC0-1.0
PackageName: FooPackage
Originator: David A. Wheeler
PackageHomePage: https://github.com/david-a-wheeler/spdx-tutorial/
PackageLicenseDeclared: MIT

The full list of possible tags can be found here:
https://spdx.org/sites/cpstandard/files/pages/files/spdx_onepager.pdf

---------

Community Health Analytics Open Source Software (CHAOSS)

The purpose is to develop tools and metrics for evaluation of the health of open source projects and ecosystems, with a view to increasing sustainability over time. This is important for stakeholders making good, informed decisions about how to be involved.

The goals are:

- Establish excellent metrics for measuring community activity, contributions, and health
- Produce software tooling or doing the analysis
- Build project health reports.

--------------

Mozilla Public License

Änderungen müssen ebenfalls im Quellcode unter der MPL-2.0 veröffentlicht werden.

Der Trick bei der MPL ist, dass sie pro Datei angewandt wird. Covered Software ist nicht ein abgeschlossenes Stück Software wie z.B. bei der GPL, sondern die Menge der Dateien, die explizit unter der MPL lizenziert wurden. Das kann alle Dateien eines Softwareprojekts betreffen oder nur eine Teilmenge. Im letzteren Fall stehen die nicht-MPL-Dateien unter irgendeiner anderen Lizenz und das Ergebnis nennt sich dann Larger Work.

Konkret bedeutet dass, das Du ein MPL-2.0-Projekt nehmen und beliebige proprietäre Erweiterung hinzufügen kannst, solange diese in neuen Dateien landen. Änderungen an den schon vorhandenen Dateien musst Du im Quellcode veröffentlichen, aber das war es dann auch schon. Eine Verteilung in compilierter Form verpflichtet Dich nur zur Herausgabe der MPL-2.0-Quelldateien inklusive aller Deiner Änderungen, aber nicht zur Herausgabe Deiner hinzugefügten Dateien. Es ist auch nicht verpflichtend, dem Nutzer das eigenständige Bauen der Software zu ermöglichen.

-----------

    


